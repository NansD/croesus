# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: croesus-service
# app and org for use with dashboard.serverless.com
app: croesus
# org: nansd # prevents serverless to login on personnal not-nansd accounts
# You can pin your service to only deploy with a specific Serverless version
frameworkVersion: '>=2.0.0 <3.0.0'
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-3
  environment:
    MONGODB_CONNECTION_STRING: ${opt:MONGODB_CONNECTION_STRING}
# you can overwrite defaults here

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"
# you can define service wide environment variables here
#  environment:
#    variable1: value1
# you can add packaging information here
package:
  #  include:
  #    - include-me.js
  #    - include-me-dir/**
functions:
  # user
  userSubmission:
    handler: api/user/handler.submit
    memorySize: 256
    description: Submit user information.
    events:
      - http:
          path: users
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'
  userUpdate:
    handler: api/user/handler.update
    memorySize: 256
    description: Update user information.
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
  userDeletion:
    handler: api/user/handler.delete
    memorySize: 256
    description: Delete user based on its id.
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
  listUsers:
    handler: api/user/handler.list
    memorySize: 256
    description: Get all users
    events:
      - http:
          path: users
          method: get
          cors: true
  getSelfUsers:
    handler: api/user/handler.getSelf
    memorySize: 256
    description: Get self
    events:
      - http:
          path: users/getSelf
          method: get
          cors: true
  loginUser:
    handler: api/user/handler.login
    memorySize: 256
    description: Authenticate user
    events:
      - http:
          path: users/login
          method: post
          cors: true
  # group
  groupSubmission:
    handler: api/group/handler.submit
    memorySize: 256
    description: Submit group information.
    events:
      - http:
          path: groups
          method: post
          cors: true
  groupUpdate:
    handler: api/group/handler.update
    memorySize: 256
    description: Update group information.
    events:
      - http:
          path: groups/{groupId}
          method: put
          cors: true
  groupDeletion:
    handler: api/group/handler.delete
    memorySize: 256
    description: Delete group based on its id.
    events:
      - http:
          path: groups/{groupId}
          method: delete
          cors: true
  listGroups:
    handler: api/group/handler.list
    memorySize: 256
    description: Get all groups
    events:
      - http:
          path: groups
          method: get
          cors: true
  getOneGroup:
    handler: api/group/handler.getOne
    memorySize: 256
    description: Get group based on its id.
    events:
      - http:
          path: groups/{groupId}
          method: get
          cors: true
  computeDebts:
    handler: api/group/handler.computeDebts
    memorySize: 256
    description: Compute expenses
    events:
      - http:
          path: groups/{groupId}/computeDebts
          method: get
          cors: true
  # expense
  expenseSubmission:
    handler: api/expense/handler.submit
    memorySize: 256
    description: Submit expense information.
    events:
      - http:
          path: /groups/{groupId}/expenses
          method: post
          cors: true
  expenseUpdate:
    handler: api/expense/handler.update
    memorySize: 256
    description: Update expense information.
    events:
      - http:
          path: /groups/{groupId}/expenses/{id}
          method: put
          cors: true
  expenseDeletion:
    handler: api/expense/handler.delete
    memorySize: 256
    description: Delete expense based on its id.
    events:
      - http:
          path: /groups/{groupId}/expenses/{id}
          method: delete
          cors: true
  listExpenses:
    handler: api/expense/handler.list
    memorySize: 256
    description: Get all expenses
    events:
      - http:
          path: /groups/{groupId}/expenses
          method: get
          cors: true
plugins:
  # - serverless-domain-manager
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    includeModules: true # enable auto-packing of external modules
  serverless-offline:
    useChildProcesses: true
# custom:
#   customDomain:
#     domainName: croesus.nans-dumortier.com
#     basePath: 'api'
#     stage: ${self:provider.stage}
#     certificateName: '*.nans-dumortier.com'
#     createRoute53Record: true
#     endpointType: 'regional'
#     securityPolicy: tls_1_2
#     apiType: rest

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
